%
% EEE4114F PROJECT
% Artificial Reverberation
% 
% Kevin Murning
% Kelsey Kaplan
%
% May 2019
%
%
%
%
%


% load room impulse response
a = audioinfo("GalbraithHall.wav"); 
[ir,fs] = audioread("GalbraithHall.wav");
%soundsc(ir, fs);


% make single channel
irMono = mean(ir, 2);
%soundsc(irMono, fs);


% room impulse response plot
figure(1);
plot(ir);
%axis([0 1e4, -inf inf]) 
title('Impulse Response of the Room');
xlabel('Time [samples]')


% room frequency spectrum plot
%figure(2);
%Y = fft(ir);
%plot(abs(Y))
N = fs; % number of FFT points
transform = fft(ir,N)/N;
magTransform = abs(transform);
%faxis = linspace(-fs/2,fs/2,N);
%plot(faxis,fftshift(magTransform));
%xlabel('Frequency [Hz]')

% view frequency content up to half the sampling rate:
%axis([0 length(faxis)/2, 0 max(magTransform)]) 

% change the tick labels of the graph from scientific notation to floating point: 
xt = get(gca,'XTick');  
set(gca,'XTickLabel', sprintf('%.0f|',xt))

%---------------------------------------------------------------------------------------% 
% load anechoic (echoless) sound and convolve with impulse response for idealised reverb
%---------------------------------------------------------------------------------------% 

[x,fs2] = audioread("Anechoic.wav"); 
%soundsc(x,fs2)

% first method
y = conv(x,irMono); % convolution with FFT
%soundsc(y,fs2)

figure(3);
plot(y,'b');
hold on
plot(x,'black');
t = 0 : 1/fs : length(ir)/fs; % time point
title('Impulse Response Reverberated Signal');
xlabel('time'),ylabel('Amplitude')
legend('Convolved Signal', 'Original Signal')


% second method using function
y2 = freqconv(x, irMono);
soundsc(y2, fs2);

figure(4);
plot(y2,'b');
hold on
plot(x,'black');
t = 0 : 1/fs : length(ir)/fs; % time point
title('Impulse Response Reverberated Signal');
xlabel('time'),ylabel('Amplitude')
legend('Convolved Signal', 'Original Signal')

% y3 = (0.5 * y) + (0.5 * x);
% y3 = y3 / max(abs(y3));
% soundsc(y3, fs2);

function y = freqconv(sig, ir)

[lenSig, chanSig] = size(sig);
[lenIR, chanIR] = size(ir);
    
sig = [sig; zeros(lenIR - 1, chanSig)];
ir = [ir; zeros(lenSig - 1, chanSig)];

SIG = fft(sig);             % fast convolution
IR = fft(ir);
y = ifft(SIG .* IR);
y = y / max(abs(y));        % normalize signal

y = (0.8 * y) + (0.2 * sig);  % mixes in original signal - can alter percentages
y = y / max(abs(y));

end











